syntax = "proto3";

package api;

option go_package = "./api";

import "google/api/annotations.proto";

message HelloWorldRequest {
   // description here
    optional string ping = 1;
}

message HelloWorldResponse {
    string pang = 1;
}

// heartbeat protocol
message HeartbeatRequest {
    message Agent {
        string localip = 1;
        double cpu_ratio = 2;
        double disk_ratio = 3;
        double mem_ratio = 4;
        string datetime = 5;
    }
    Agent agent_info = 1;

    message DB {
        string dbtype = 1;
        int32 port = 2;
        double qps = 3;
        double tps = 4;
    }
    DB dbInfo = 2;
}

message HeartbeatResponse {
}

// startup reporter protocol
message StartupReportRequest {
    enum HostType {
        UNKNOWN = 0;
        SELF = 1;
        ALIYUN = 2;
        TENCENTYUN = 3;
    }
    HostType host_type = 1;
    
    string hostname = 2;
    
    enum DBType {
        MYSQL = 0;
        TIDB = 1;
        REDIS = 2;
        MONGODB = 3;
    }
    DBType db_type = 3;

    string db_version = 4;
    string ip_addr = 5;
    int32 port = 7;
    string os = 8;
    string os_version = 9;
    string kernel_version = 10;
    string env = 11;

}

message StartupReportResponse {

}

message SearchMemberLogCountRequest {
    string start_time = 1;
    string end_time = 2;
    string type = 3;
    string db_ip = 4;
    int32 db_port = 5;
    int64 size = 6;
    int64 from = 7;
    int64 buckets = 8;
}

message SearchMemberLogCountResponse {
    int32 took = 1;
    bool timed_out = 2;
    int64 from = 3;
    int64 size = 4;
    HitsRes hits = 5;
    AggsRes aggregations = 6;
}

message Total {
    int64 value = 1;
}

message HitsRes {
    Total total = 1;
    repeated Hits hits = 2;
}

message SourceIp {
    string ip = 1;
}

message Input {
    string type = 1;
}

message Fileset {
    string name = 1;
}

message Service {
    string type = 1;
}

message Host {
    string name = 1;
}

message LockTime {
    float sec = 1;
}

message SlowLog {
    string schema = 1;
    LockTime lock_time = 2;
    int32 rows_sent = 3;
    int32 rows_examined = 4;
    string query = 5;
    string current_user = 6;
}

message Mysql {
    int32 thread_id = 1;
    SlowLog slowlog = 2;
}

message User {
    string name = 1;
}

message Source {
    string cluster = 1;
    string instance = 2;
    SourceIp source = 3;
    Fileset fileset = 4;
    Input input = 5;
    string timestamp = 6 [json_name = "@timestamp"];
    Service service = 7;
    Host host = 8;
    Mysql mysql = 9;
    User user = 10;
}

message Hits {
    string _index = 1;
    string _id = 2;
    Source _source = 3;
}

message AggsRes {
    Logs logs = 1;
    string interval = 2;
}

message Logs {
    repeated Buckets buckets = 1;
}

message Buckets {
    string key_as_string = 1;
    int64 key = 2;
    int32 doc_count = 3;
}

message GetDBClustersRequest {
    int32 offset = 1;
    int32 limit = 2;
}

message DBCluster {
    // 集群 id
    int32 id = 1;
    // 集群名
    string name = 2;
    // 集群类型
    string description = 3;
    // db 类型：mysql
    string dbtype = 4;
    // 创建时间戳
    int64 created_at = 5;
    // 更新时间戳
    int64 updated_at = 6;
}

message GetDBClustersResponse {
    repeated DBCluster dbclusters = 1;
}

message NewDBClusterRequest {
    // 集群名
    string name = 1;
    // 集群描述
    string description = 2;
    // db类型
    string db_type = 3;
    // 实例id列表
    repeated int32 member_ids = 4;
}

message DBClusterMember {
    // 成员id
    int32 id = 1;
    // 集群 id
    int32 cluster_id = 2;
    // 主机名
    string hostname = 3;
    // db类型：mysql
    string db_type = 4;
    // db 版本
    string db_version = 5;
    // 角色
    int32 role = 6;
    // ip
    string ipaddr = 7;
    // db port
    int32 port = 8;
    // 操作系统
    string os = 9;
    // 操作系统发型版本
    string os_version = 10;
    // 主机类型：0：未指定，1：自有；2：阿里云，3：腾讯云
    int32 host_type = 11;
    // 创建时间戳
    int64 created_at = 12;
    // 更新时间戳
    int64 updated_at = 13;

    message ExtraInfo {
        // 集群名（cluster_id != 0时存在）
        string cluster_name = 1;
    }
    // 可能不存在
    optional ExtraInfo extra = 99;

}

message GetToAssignDbClusterMembersRequest {
    // eg.mysql
    string db_type = 1;
    // eg.test,prod
    string env = 2;
    // ip 前缀，可选
    optional string ip_prefix = 3;
    int32 limit = 4;
    int32 offset = 5;
}

message GetToAssignDbClusterMembersResponse {
    repeated DBClusterMember members = 1;
}

message GetDbClusterMembersRequest {
}

message GetDbClusterMembersResponse {
    repeated DBClusterMember members = 1;
}

message AssignDbClusterMembersRequest {
    repeated int32 member_ids = 1;
}

message AssignDbClusterMembersResponse {
}

message GetAllTagsRequest {
}

message GetAllTagsResponse {
    repeated string tags = 1;
}

message AddTagRequest {
    string item_type = 1;
    int32 item_id = 2;
    string tag = 3;
}

message AddTagResponse {
}

message GetInstanceIndicesRequest {
    string host = 1;
    int32 port = 2;
    string from = 3;
    string to = 4;
    int64 buckets = 5;
}

message GetInstanceIndicesResponse {
    message IndexValue {
        // 指标值；
        double value = 1;
        // 计算当前指标值元素个数；
        int64 count = 2;
        // 该指标值对应的起始时间
        string start_time = 3;
    }
    repeated IndexValue cpu_ratios = 1;
    repeated IndexValue mem_ratios = 2; 
    repeated IndexValue disk_ratios = 3; 
    repeated IndexValue qps = 4; 
    repeated IndexValue tps = 5; 
}

service DBRainhubService {
    // title here    
    rpc Hello (HelloWorldRequest) returns (HelloWorldResponse) {
        option (google.api.http) = {
            post: "/v1/hello"
        };
    }  
    // 查询实例的慢日志内容和聚合trend信息
    rpc DbRainhubSearchMemberLogsWithCount(SearchMemberLogCountRequest) returns (SearchMemberLogCountResponse) {
        option (google.api.http) = {
            post: "/dbrainhub/search/instance"
        };
    }

    // 集群-获取集群列表
    rpc GetDBClusters (GetDBClustersRequest) returns (GetDBClustersResponse) {
        option (google.api.http) = {
            get: "/dbclusters"
        };
    }

    // 集群-创建新集群
    rpc NewDBClusters (NewDBClusterRequest) returns (DBCluster) {
        option (google.api.http) = {
            post: "/dbclusters"
        };
    }

    // 集群-获取待分配实例列表
    rpc GetToAssignDbClusterMembers (GetToAssignDbClusterMembersRequest) returns (GetToAssignDbClusterMembersResponse) {
        option (google.api.http) = {
            get: "/dbclusters/to_assign_members"
        };
    }

    // 集群-得到集群成员列表
    rpc GetDbClusterMembers (GetDbClusterMembersRequest) returns (GetDbClusterMembersResponse) {
        option (google.api.http) = {
            get: "/dbclusters/:clusterId/members"
        };
    }

    // 集群-实例分配到集群
    rpc AssignDbClusterMembers (AssignDbClusterMembersRequest) returns (AssignDbClusterMembersResponse) {
        option (google.api.http) = {
            put: "/dbclusters/:clusterId/members"
        };
    }

    // tags-获取所有tags
    rpc GetAllTags (GetAllTagsRequest) returns (GetAllTagsResponse) {
        option (google.api.http) = {
            get: "/tags/all"
        };
    }

    // tags-添加tag
    rpc AddTag (AddTagRequest) returns (AddTagResponse) {
        option (google.api.http) = {
            post: "/tags"
        };
    }

    // 指标-获取所有指标
    rpc GetInstanceIndices (GetInstanceIndicesRequest) returns (GetInstanceIndicesResponse) {
        option (google.api.http) = {
            post: "/instance/indices"
        };
    }
}

